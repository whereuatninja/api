worker_processes 4;

events { worker_connections 1024; }

http {
        ssl_session_cache   shared:SSL:10m;
        ssl_session_timeout 30m;
        
        #See http://blog.argteam.com/coding/hardening-node-js-for-production-part-2-using-nginx-to-avoid-node-js-load        
        proxy_cache_path        /var/cache/nginx levels=1:2 keys_zone=one:8m max_size=3000m inactive=600m;
        proxy_temp_path         /var/tmp;
        include                 mime.types;
        default_type            application/octet-stream;
        sendfile                on;
        keepalive_timeout       65;
        
        gzip                    on;
        gzip_comp_level         6;
        gzip_vary               on;
        gzip_min_length         1000;
        gzip_proxied            any;
        gzip_types              text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
        gzip_buffers            16 8k;

        upstream web-1 {
          least_conn;

          server web:3000 weight=10 max_fails=3 fail_timeout=30s;
          keepalive 64;
        }

        upstream node-upstream {
              least_conn;
              
              server node-1:3000 weight=10 max_fails=3 fail_timeout=30s;
              #server node2:3000 weight=10 max_fails=3 fail_timeout=30s;
              #server node3:3000 weight=10 max_fails=3 fail_timeout=30s;
              
              keepalive 64;
        }

        
        server {
              listen 80; 
              server_name docker;
              #server_name whereuat.ninja;
              root  /var/www/public;
              # Handle static files
              
#              location /app/ {
#                access_log off;
#                expires 1d;
#              }
#              
#              location /css/ {
#                access_log off;
#                expires 1d;
#              }
#              
#              location /img/ {
#                access_log off;
#                expires 1d;
#              }
#              
#              location /js/ {
#                access_log off;
#                expires 1d;
#              }
                           
              location / {
                  proxy_pass            http://web-1;
                  proxy_http_version    1.1;
                  proxy_set_header      Upgrade $http_upgrade;
                  proxy_set_header      Connection 'upgrade';
                  proxy_set_header      Host $host;
                  proxy_set_header      X-Real-IP            $remote_addr;
                  proxy_set_header      X-Forwarded-For  $proxy_add_x_forwarded_for;
                  proxy_set_header      X-NginX-Proxy    true;
                  proxy_cache_bypass    $http_upgrade;
              }

              location /api {
                  proxy_pass            http://node-upstream;
                  proxy_http_version    1.1;
                  proxy_set_header      Upgrade $http_upgrade;
                  proxy_set_header      Connection 'upgrade';
                  proxy_set_header      Host $host;
                  proxy_set_header      X-Real-IP            $remote_addr;
                  proxy_set_header      X-Forwarded-For  $proxy_add_x_forwarded_for;
                  proxy_set_header      X-NginX-Proxy    true;
                  proxy_cache_bypass    $http_upgrade;
              }
              
              #return  301 https://$server_name$request_uri;
        }
         
 
}
